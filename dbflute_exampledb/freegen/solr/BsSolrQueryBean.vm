package ${request.package}.query.bs;

import java.util.ArrayList;
import java.util.List;
import java.util.Collection;
import java.util.Date;

import jp.bizreach.example.solr.base.AbstractSolrQueryBean;
import jp.bizreach.example.solr.base.SolrQueryBuilder;
import jp.bizreach.example.solr.base.SolrQueryLogicalOperator;
import jp.bizreach.example.solr.base.SolrSetRangeSearchBean;
import jp.bizreach.example.solr.meta.${tableMap.baseSchemaName}SolrMeta;

import org.apache.commons.lang.StringUtils;
import org.apache.solr.client.solrj.SolrQuery.ORDER;
import org.apache.solr.client.solrj.SolrQuery.SortClause;

/**
 * Solr検索クエリ生成用のQueryBeanのBaseクラス
 * string, tint, tlong, tdate, tdouble, text_ja, text_cjkのみに対応しています
 * @author FreeGen
 */
public class ${tableMap.baseQueryBeanClassName} extends AbstractSolrQueryBean {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
#foreach ($column in $request.columnList)
    /** Query Attribute for ${column.name} (${column.nativeType}) */
    protected String ${column.uncapCamelName}Query;

#end
    // =====================================================================================
    //                                                                            Conditions
    //                                                                            ==========
#foreach ($column in $request.columnList)
    // ===========================================================
    // Query Setter for ${column.name} (${column.nativeType})
    //                                                  ==========

	/**
	 * ExistsQuery( q=${column.name}:* )
	 */
	public void set${column.capCamelName}_Exists() {
		this.${column.uncapCamelName}Query = SolrQueryBuilder.queryBuilderForExists("${column.name}");
	}

#if($column.nativeType == "string")
	public void set${column.capCamelName}_Equal(String query) {
		if (StringUtils.isNotEmpty(query)) {
			set${column.capCamelName}_Equal(query, null);
		}
	}

	public void set${column.capCamelName}_NotEqual(String query) {
		if (StringUtils.isNotEmpty(query)) {
			set${column.capCamelName}_Equal(query, SolrQueryLogicalOperator.NOT);
		}
	}

	public void set${column.capCamelName}_Equal(String query, SolrQueryLogicalOperator operator) {
		String convertedQuery = SolrQueryBuilder.queryBuilderEqualWithOperator("${column.name}", query, operator);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

	public void set${column.capCamelName}_InScope(Collection<String> queryList) {
		this.set${column.capCamelName}_InScope(queryList, SolrQueryLogicalOperator.OR);
	}

	public void set${column.capCamelName}_InScope(Collection<String> queryList, SolrQueryLogicalOperator operator) {
		String convertedQuery = SolrQueryBuilder.queryBuilderForSearchWordList("${column.name}", queryList, operator);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

	public void set${column.capCamelName}_NotInScope(Collection<String> queryList) {
		String convertedQuery = SolrQueryBuilder.queryBuilderForSearchWordList("${column.name}", queryList, SolrQueryLogicalOperator.NOT);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}
	
	public void set${column.capCamelName}_PrefixSearch(String query) {
		String convertedQuery = SolrQueryBuilder.queryBuilderForPrefixSearch("${column.name}", query);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

	public void set${column.capCamelName}_RangeSearchFrom(String from) {
		if (StringUtils.isNotEmpty(from)) {
			set${column.capCamelName}_RangeSearch(from, null);
		}
	}

	public void set${column.capCamelName}_RangeSearchTo(String to) {
		if (StringUtils.isNotEmpty(to)) {
			set${column.capCamelName}_RangeSearch(null, to);
		}
	}

	public void set${column.capCamelName}_RangeSearch(String from, String to) {
		String convertedQuery = SolrQueryBuilder.queryBuilderForRangeSearch("${column.name}", from, to);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

	public void set${column.capCamelName}_SetRangeSearch(String cd, String from, String to) {
		String convertedQuery = SolrQueryBuilder.queryBuilderForSetRangeSearch("${column.name}", cd, from, to, SET_RANGE_SEARCH_PADDING_LENGTH, PADDING_STR);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

	public void set${column.capCamelName}_SetRangeSearchInScope(Collection<SolrSetRangeSearchBean> beanList) {
		String convertedQuery = SolrQueryBuilder.queryBuilderForSetRangeSearchInScope("${column.name}", beanList, SET_RANGE_SEARCH_PADDING_LENGTH, PADDING_STR);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

	public void addOrderBy_${column.capCamelName}_Desc() {
		SortClause clause = new SortClause(${tableMap.baseSchemaName}SolrMeta.FIELD_${column.name}, ORDER.desc);
		solrSortClauseList.add(clause);
	}

	public void addOrderBy_${column.capCamelName}_Asc() {
		SortClause clause = new SortClause(${tableMap.baseSchemaName}SolrMeta.FIELD_${column.name}, ORDER.asc);
		solrSortClauseList.add(clause);
	}

#elseif($column.nativeType == "tlong")
	public void set${column.capCamelName}_Equal(Long query) {
		if (query != null) {
			set${column.capCamelName}_Equal(query, null);
		}
	}

	public void set${column.capCamelName}_Equal(Long query, SolrQueryLogicalOperator operator) {
		if (query != null) {
			this.${column.uncapCamelName}Query = SolrQueryBuilder.queryBuilderEqualWithOperator("${column.name}", query.toString(), operator);
		}
	}

	public void set${column.capCamelName}_NotEqual(Long query) {
		if (query != null) {
			set${column.capCamelName}_Equal(query, SolrQueryLogicalOperator.NOT);
		}
	}

	public void set${column.capCamelName}_InScope(Collection<Long> queryList) {
		this.set${column.capCamelName}_InScope(queryList, SolrQueryLogicalOperator.OR);
	}

	public void set${column.capCamelName}_InScope(Collection<Long> queryList, SolrQueryLogicalOperator operator) {
		String convertedQuery = SolrQueryBuilder.queryBuilderForSearchLongList("${column.name}", queryList, operator);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

	public void set${column.capCamelName}_NotInScope(Collection<Long> queryList) {
		String convertedQuery = SolrQueryBuilder.queryBuilderForSearchLongList("${column.name}", queryList, SolrQueryLogicalOperator.NOT);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

	public void set${column.capCamelName}_RangeSearchFrom(Long from) {
		if (from != null) {
			set${column.capCamelName}_RangeSearch(from, null);
		}
	}

	public void set${column.capCamelName}_RangeSearchTo(Long to) {
		if (to != null) {
			set${column.capCamelName}_RangeSearch(null, to);
		}
	}

	public void set${column.capCamelName}_RangeSearch(Long from, Long to) {
		String convertedQuery = SolrQueryBuilder.queryBuilderForRangeSearch("${column.name}", from, to);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

	public void addOrderBy_${column.capCamelName}_Desc() {
		SortClause clause = new SortClause(${tableMap.baseSchemaName}SolrMeta.FIELD_${column.name}, ORDER.desc);
		solrSortClauseList.add(clause);
	}

	public void addOrderBy_${column.capCamelName}_Asc() {
		SortClause clause = new SortClause(${tableMap.baseSchemaName}SolrMeta.FIELD_${column.name}, ORDER.asc);
		solrSortClauseList.add(clause);
	}

#elseif($column.nativeType == "tint")
	public void set${column.capCamelName}_Equal(Integer query) {
		if(query != null) {
			set${column.capCamelName}_Equal(query, null);
		}
	}

	public void set${column.capCamelName}_Equal(Integer query, SolrQueryLogicalOperator operator) {
		String convertedQuery = SolrQueryBuilder.queryBuilderEqualWithOperator("${column.name}", query.toString(), operator);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

	public void set${column.capCamelName}_NotEqual(Integer query) {
		if(query != null){
			set${column.capCamelName}_Equal(query, SolrQueryLogicalOperator.NOT);
		}
	}

	public void set${column.capCamelName}_InScope(Collection<Integer> queryList) {
		this.set${column.capCamelName}_InScope(queryList, SolrQueryLogicalOperator.OR);
	}

	public void set${column.capCamelName}_InScope(Collection<Integer> queryList, SolrQueryLogicalOperator operator) {
		String convertedQuery = SolrQueryBuilder.queryBuilderForSearchIntegerList("${column.name}", queryList, operator);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

	public void set${column.capCamelName}_NotInScope(Collection<Integer> queryList) {
		String convertedQuery = SolrQueryBuilder.queryBuilderForSearchIntegerList("${column.name}", queryList, SolrQueryLogicalOperator.NOT);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

	public void set${column.capCamelName}_RangeSearchFrom(Integer from) {
		if (from != null) {
			set${column.capCamelName}_RangeSearch(from, null);
		}
	}

	public void set${column.capCamelName}_RangeSearchTo(Integer to) {
		if (to != null) {
			set${column.capCamelName}_RangeSearch(null, to);
		}
	}

	public void set${column.capCamelName}_RangeSearch(Integer from, Integer to) {
		String convertedQuery = SolrQueryBuilder.queryBuilderForRangeSearch("${column.name}", from, to);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

	public void addOrderBy_${column.capCamelName}_Desc() {
		SortClause clause = new SortClause(${tableMap.baseSchemaName}SolrMeta.FIELD_${column.name}, ORDER.desc);
		solrSortClauseList.add(clause);
	}

	public void addOrderBy_${column.capCamelName}_Asc() {
		SortClause clause = new SortClause(${tableMap.baseSchemaName}SolrMeta.FIELD_${column.name}, ORDER.asc);
		solrSortClauseList.add(clause);
	}

#elseif($column.nativeType == "tdate")
	public void set${column.capCamelName}_RangeSearchFrom(Date from) {
		if (from != null) {
			set${column.capCamelName}_RangeSearch(from, null);
		}
	}

	public void set${column.capCamelName}_RangeSearchTo(Date to) {
		if (to != null) {
			set${column.capCamelName}_RangeSearch(null, to);
		}
	}

	public void set${column.capCamelName}_RangeSearch(Date from, Date to) {
		String convertedQuery = SolrQueryBuilder.queryBuilderForRangeSearch("${column.name}", from, to);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

	public void addOrderBy_${column.capCamelName}_Desc() {
		SortClause clause = new SortClause(${tableMap.baseSchemaName}SolrMeta.FIELD_${column.name}, ORDER.desc);
		solrSortClauseList.add(clause);
	}

	public void addOrderBy_${column.capCamelName}_Asc() {
		SortClause clause = new SortClause(${tableMap.baseSchemaName}SolrMeta.FIELD_${column.name}, ORDER.asc);
		solrSortClauseList.add(clause);
	}

#elseif($column.nativeType == "tdouble")
	public void addOrderBy_${column.capCamelName}_Desc() {
		SortClause clause = new SortClause(${tableMap.baseSchemaName}SolrMeta.FIELD_${column.name}, ORDER.desc);
		solrSortClauseList.add(clause);
	}

	public void addOrderBy_${column.capCamelName}_Asc() {
		SortClause clause = new SortClause(${tableMap.baseSchemaName}SolrMeta.FIELD_${column.name}, ORDER.asc);
		solrSortClauseList.add(clause);
	}

#elseif($column.nativeType == "text_ja")
	public void set${column.capCamelName}_FreewordSearch(String queryStrs, SolrQueryLogicalOperator operator) {
		String convertedQuery = SolrQueryBuilder.queryBuilderForFreewordSearch("${column.name}", queryStrs, operator);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

	public void set${column.capCamelName}_FreewordSearch(Collection<String> queryList, SolrQueryLogicalOperator operator) {
		String convertedQuery  = SolrQueryBuilder.queryBuilderForSearchWordList("${column.name}", queryList, operator);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

#elseif($column.nativeType == "text_cjk")
	public void set${column.capCamelName}_FreewordSearch(String queryStrs, SolrQueryLogicalOperator operator) {
		String convertedQuery = SolrQueryBuilder.queryBuilderForFreewordSearch("${column.name}", queryStrs, operator);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

	public void set${column.capCamelName}_FreewordSearch(Collection<String> queryList, SolrQueryLogicalOperator operator) {
		String convertedQuery  = SolrQueryBuilder.queryBuilderForSearchWordList("${column.name}", queryList, operator);
		if (StringUtils.isNotEmpty(convertedQuery)) {
			this.${column.uncapCamelName}Query = convertedQuery;
		}
	}

#end

#end
    // =====================================================================================
    //                                                                          Query Getter
    //                                                                          ============

	@Override
	public List<String> getQueryList() {
		List<String> queryList = new ArrayList<String>();
#foreach ($column in $request.columnList)
		if (StringUtils.isNotEmpty(${column.uncapCamelName}Query)) {
			queryList.add(${column.uncapCamelName}Query);
		}

#end
		if (StringUtils.isNotEmpty(orQuery)) {
			queryList.add(orQuery);
		}
		return queryList;
	}
}
